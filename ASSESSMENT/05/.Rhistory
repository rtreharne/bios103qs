# scatter plot of "Viable counts" by "Temperature". color by "Location"
plot(
data$Moisture,
data$Viable.counts,
col=transparent_colors[location_colors],
pch=19,
main="",
xlab="Moisture",
ylab="Viable counts",
ylim=c(100, 150),
xlim=c(50, 80)
)
setwd("C:/Users/treharne/Documents/bios103qs/ASSESSMENT/05")
# Load the data
data <- read.csv("compost_987654321.csv")
# Plot a histogram of "Viable counts"
hist(data$Viable.counts, main="Histogram of Viable counts", xlab="Viable counts", ylab="Frequency")
# Add a vertical lines at the mean and median
abline(v=mean(data$Viable.counts), col="red")
abline(v=median(data$Viable.counts), col="blue")
# add a Legend. Quote values to avoid scientific notation
legend("topright", legend=c(paste("Mean =", format(mean(data$Viable.counts), scientific=FALSE)),
paste("Median =", format(median(data$Viable.counts), scientific=FALSE))),
col=c("red", "blue"), lty=1, cex=0.8)
# create a grouped boxplot of "viable counts" by "location"
boxplot(Viable.counts ~ Location, data=data, main="Boxplot of Viable counts by Location", xlab="Location", ylab="Viable counts")
# Map Location values to colors with transparency
location_colors <- as.numeric(factor(data$Location))
color_palette <- rainbow(length(unique(data$Location)))
transparent_colors <- sapply(color_palette, function(col) rgb(t(col2rgb(col)), maxColorValue=255, alpha=100))
# scatter plot of "Viable counts" by "Temperature". color by "Location"
plot(
data$Moisture,
data$Viable.counts,
col=transparent_colors[location_colors],
pch=19,
main="",
xlab="Moisture",
ylab="Viable counts",
ylim=c(100, 150),
xlim=c(50, 80)
)
# Add a legend for the locations
legend("bottomleft", legend=levels(factor(data$Location)), col=transparent_colors, pch=19, cex=0.8)
# Load the plotly library
library(plotly)
# scatter plot of "Viable counts" by "Temperature". color by "Location"
plot(
data$Temperature,
data$Viable.counts,
col=transparent_colors[location_colors],
pch=19,
main="",
xlab="Temperature (deg C)",
ylab="Viable Counts",
#ylim=c(100, 150),
#xlim=c(50, 80)
)
# Add a legend for the locations
legend("topright", legend=levels(factor(data$Location)), col=transparent_colors, pch=19, cex=0.8)
# Load the data
data <- read.csv("compost_123456789.csv")
locations <- sort(unique(data$Location))
# Initialize an empty data frame for the summary
summary_table <- data.frame(
Location = character(),
Mean = numeric(),
Median = numeric(),
Max = numeric(),
Min = numeric(),
SD = numeric(),
Count = numeric(),
stringsAsFactors = FALSE
)
for (location in locations) {
# Select data for the current location
location_data <- data[data$Location == location, "Viable.counts"]
# Calculate statistics
location_mean <- round(mean(location_data, na.rm = TRUE), 1)
location_median <- round(median(location_data, na.rm = TRUE), 1)
location_max <- round(max(location_data, na.rm = TRUE), 1)
location_min <- round(min(location_data, na.rm = TRUE), 1)
location_sd <- round(sd(location_data, na.rm = TRUE), 1)
location_count <- length(location_data)
# Add the results to the summary table
summary_table <- rbind(summary_table, data.frame(
Location = location,
Mean = location_mean,
Median = location_median,
Max = location_max,
Min = location_min,
SD = location_sd,
Count = location_count
))
}
# Write the summary table to a CSV file
write.csv(summary_table, "summary_table.csv", row.names = FALSE)
# Print the unique locations
print(locations)
# Plot a histogram of "Viable counts"
hist(data$Viable.counts, main="Histogram of Viable counts", xlab="Viable counts", ylab="Frequency")
# Add a vertical lines at the mean and median
abline(v=mean(data$Viable.counts), col="red")
abline(v=median(data$Viable.counts), col="blue")
# add a Legend. Quote values to avoid scientific notation
legend("topright", legend=c(paste("Mean =", format(mean(data$Viable.counts), scientific=FALSE)),
paste("Median =", format(median(data$Viable.counts), scientific=FALSE))),
col=c("red", "blue"), lty=1, cex=0.8)
# create a grouped boxplot of "viable counts" by "location"
boxplot(Viable.counts ~ Location, data=data, main="Boxplot of Viable counts by Location", xlab="Location", ylab="Viable counts")
# Map Location values to colors with transparency
location_colors <- as.numeric(factor(data$Location))
color_palette <- rainbow(length(unique(data$Location)))
transparent_colors <- sapply(color_palette, function(col) rgb(t(col2rgb(col)), maxColorValue=255, alpha=100))
# scatter plot of "Viable counts" by "Temperature". color by "Location"
plot(
data$Temperature,
data$Viable.counts,
col=transparent_colors[location_colors],
pch=19,
main="",
xlab="Temperature (deg C)",
ylab="Viable Counts",
#ylim=c(100, 150),
#xlim=c(50, 80)
)
# Add a legend for the locations
legend("topright", legend=levels(factor(data$Location)), col=transparent_colors, pch=19, cex=0.8)
# Load the plotly library
library(plotly)
# Create a 3D scatter plot
fig <- plot_ly(data, x = ~Temperature, y = ~Moisture, z = ~Viable.counts, color = ~Location, colors = rainbow(length(unique(data$Location))), type = 'scatter3d', mode = 'markers', marker = list(size = 5, opacity = 0.7))
# Add titles and labels
fig <- fig %>% layout(title = "3D Scatter Plot of Temperature, Moisture, and Viable Counts",
scene = list(xaxis = list(title = 'Temperature'),
yaxis = list(title = 'Moisture'),
zaxis = list(title = 'Viable Counts')))
# Show the plot
fig
# Initialize an empty data frame for the summary
summary_table <- data.frame(
Location = character(),
Mean = numeric(),
Median = numeric(),
Max = numeric(),
Min = numeric(),
SD = numeric(),
Count = numeric(),
stringsAsFactors = FALSE
)
for (location in locations) {
# Select data for the current location
location_data <- data[data$Location == location, "Viable.counts"]
# Calculate statistics
location_mean <- round(mean(location_data, na.rm = TRUE), 1)
location_median <- round(median(location_data, na.rm = TRUE), 1)
location_max <- round(max(location_data, na.rm = TRUE), 1)
location_min <- round(min(location_data, na.rm = TRUE), 1)
location_sd <- round(sd(location_data, na.rm = TRUE), 1)
location_count <- length(location_data)
# Add the results to the summary table
summary_table <- rbind(summary_table, data.frame(
Location = location,
Mean = location_mean,
Median = location_median,
Max = location_max,
Min = location_min,
SD = location_sd,
Count = location_count
))
}
# Write the summary table to a CSV file
write.csv(summary_table, "summary_table_123456789.csv", row.names = FALSE)
# Load the data
data <- read.csv("compost_999999999.csv")
locations <- sort(unique(data$Location))
# Initialize an empty data frame for the summary
summary_table <- data.frame(
Location = character(),
Mean = numeric(),
Median = numeric(),
Max = numeric(),
Min = numeric(),
SD = numeric(),
Count = numeric(),
stringsAsFactors = FALSE
)
for (location in locations) {
# Select data for the current location
location_data <- data[data$Location == location, "Viable.counts"]
# Calculate statistics
location_mean <- round(mean(location_data, na.rm = TRUE), 1)
location_median <- round(median(location_data, na.rm = TRUE), 1)
location_max <- round(max(location_data, na.rm = TRUE), 1)
location_min <- round(min(location_data, na.rm = TRUE), 1)
location_sd <- round(sd(location_data, na.rm = TRUE), 1)
location_count <- length(location_data)
# Add the results to the summary table
summary_table <- rbind(summary_table, data.frame(
Location = location,
Mean = location_mean,
Median = location_median,
Max = location_max,
Min = location_min,
SD = location_sd,
Count = location_count
))
}
# Write the summary table to a CSV file
write.csv(summary_table, "summary_table_123456789.csv", row.names = FALSE)
# Print the unique locations
print(locations)
# Plot a histogram of "Viable counts"
hist(data$Viable.counts, main="Histogram of Viable counts", xlab="Viable counts", ylab="Frequency")
# Add a vertical lines at the mean and median
abline(v=mean(data$Viable.counts), col="red")
abline(v=median(data$Viable.counts), col="blue")
# add a Legend. Quote values to avoid scientific notation
legend("topright", legend=c(paste("Mean =", format(mean(data$Viable.counts), scientific=FALSE)),
paste("Median =", format(median(data$Viable.counts), scientific=FALSE))),
col=c("red", "blue"), lty=1, cex=0.8)
# create a grouped boxplot of "viable counts" by "location"
boxplot(Viable.counts ~ Location, data=data, main="Boxplot of Viable counts by Location", xlab="Location", ylab="Viable counts")
# Map Location values to colors with transparency
location_colors <- as.numeric(factor(data$Location))
color_palette <- rainbow(length(unique(data$Location)))
transparent_colors <- sapply(color_palette, function(col) rgb(t(col2rgb(col)), maxColorValue=255, alpha=100))
# scatter plot of "Viable counts" by "Temperature". color by "Location"
plot(
data$Temperature,
data$Viable.counts,
col=transparent_colors[location_colors],
pch=19,
main="",
xlab="Temperature (deg C)",
ylab="Viable Counts",
#ylim=c(100, 150),
#xlim=c(50, 80)
)
# Add a legend for the locations
legend("topright", legend=levels(factor(data$Location)), col=transparent_colors, pch=19, cex=0.8)
# Load the plotly library
library(plotly)
# Create a 3D scatter plot
fig <- plot_ly(data, x = ~Temperature, y = ~Moisture, z = ~Viable.counts, color = ~Location, colors = rainbow(length(unique(data$Location))), type = 'scatter3d', mode = 'markers', marker = list(size = 5, opacity = 0.7))
# Add titles and labels
fig <- fig %>% layout(title = "3D Scatter Plot of Temperature, Moisture, and Viable Counts",
scene = list(xaxis = list(title = 'Temperature'),
yaxis = list(title = 'Moisture'),
zaxis = list(title = 'Viable Counts')))
# Show the plot
fig
# Plot a histogram of "Viable counts"
hist(data$Viable.counts, main="Histogram of Viable counts", xlab="Viable counts", ylab="Frequency")
# Add a vertical lines at the mean and median
abline(v=mean(data$Viable.counts), col="red")
abline(v=median(data$Viable.counts), col="blue")
# add a Legend. Quote values to avoid scientific notation
legend("topright", legend=c(paste("Mean =", format(mean(data$Viable.counts), scientific=FALSE)),
paste("Median =", format(median(data$Viable.counts), scientific=FALSE))),
col=c("red", "blue"), lty=1, cex=0.8)
# create a grouped boxplot of "viable counts" by "location"
boxplot(Viable.counts ~ Location, data=data, main="Boxplot of Viable counts by Location", xlab="Location", ylab="Viable counts")
print(summary_table)
# Plot a histogram of "Viable counts"
hist(data$Viable.counts, main="Histogram of Viable counts", xlab="Viable counts", ylab="Frequency")
source("C:/Users/treharne/Documents/bios103qs/ASSESSMENT/05/summary_table.R")
# Load the data
data <- read.csv("compost_999999999.csv")
locations <- sort(unique(data$Location))
# Initialize an empty data frame for the summary
summary_table <- data.frame(
Location = character(),
Mean = numeric(),
Median = numeric(),
Max = numeric(),
Min = numeric(),
SD = numeric(),
Count = numeric(),
stringsAsFactors = FALSE
)
for (location in locations) {
# Select data for the current location
location_data <- data[data$Location == location, "Viable.counts"]
# Calculate statistics
location_mean <- round(mean(location_data, na.rm = TRUE), 1)
location_median <- round(median(location_data, na.rm = TRUE), 1)
location_max <- round(max(location_data, na.rm = TRUE), 1)
location_min <- round(min(location_data, na.rm = TRUE), 1)
location_sd <- round(sd(location_data, na.rm = TRUE), 1)
location_count <- length(location_data)
# Add the results to the summary table
summary_table <- rbind(summary_table, data.frame(
Location = location,
Mean = location_mean,
Median = location_median,
Max = location_max,
Min = location_min,
SD = location_sd,
Count = location_count
))
}
print(summary_table)
# Write the summary table to a CSV file
write.csv(summary_table, "summary_table_123456789.csv", row.names = FALSE)
# Plot a histogram of "Viable counts"
hist(data$Viable.counts, main="Histogram of Viable counts", xlab="Viable counts", ylab="Frequency")
# Add a vertical lines at the mean and median
abline(v=mean(data$Viable.counts), col="red")
abline(v=median(data$Viable.counts), col="blue")
# add a Legend. Quote values to avoid scientific notation
legend("topright", legend=c(paste("Mean =", format(mean(data$Viable.counts), scientific=FALSE)),
paste("Median =", format(median(data$Viable.counts), scientific=FALSE))),
col=c("red", "blue"), lty=1, cex=0.8)
# create a grouped boxplot of "viable counts" by "location"
boxplot(Viable.counts ~ Location, data=data, main="Boxplot of Viable counts by Location", xlab="Location", ylab="Viable counts")
# add a Legend. Quote values to avoid scientific notation
legend("topright", legend=c(paste("Mean =", format(mean(data$Viable.counts), scientific=FALSE)),
paste("Median =", format(median(data$Viable.counts), scientific=FALSE))),
col=c("red", "blue"), lty=1, cex=0.8)
source("~/bios103qs/ASSESSMENT/05/histogram.R")
source("~/bios103qs/ASSESSMENT/05/boxplots.R")
source("~/bios103qs/ASSESSMENT/05/boxplots.R")
source("~/bios103qs/ASSESSMENT/05/boxplots.R")
source("~/bios103qs/ASSESSMENT/05/boxplots.R")
source("~/bios103qs/ASSESSMENT/05/histogram.R")
source("~/bios103qs/ASSESSMENT/05/histogram.R")
source("~/bios103qs/ASSESSMENT/05/histogram.R")
source("~/bios103qs/ASSESSMENT/05/histogram.R")
source("~/bios103qs/ASSESSMENT/05/histogram.R")
source("~/bios103qs/ASSESSMENT/05/histogram.R")
source("~/bios103qs/ASSESSMENT/05/histogram.R")
source("~/bios103qs/ASSESSMENT/05/histogram.R")
source("~/bios103qs/ASSESSMENT/05/scatterplot.R")
# Load necessary library
library(dplyr)
data <- read.csv("compost_999999999.csv")
# Assuming your data frame is named 'data'
summary_stats <- data %>%
group_by(Location) %>%
summarise(
Avg_Temperature = mean(Temperature, na.rm = TRUE),
Avg_Moisture = mean(Moisture, na.rm = TRUE),
Avg_Viable_Counts = mean(Viable.counts, na.rm = TRUE)
)
# View the summary statistics
print(summary_stats)
source("C:/Users/treharne/Documents/bios103qs/ASSESSMENT/05/summary_table.R")
# View the summary statistics
print(summary_stats)
View(summary_table)
View(summary_table)
source("C:/Users/treharne/Documents/bios103qs/ASSESSMENT/05/summary_table.R")
View(summary_stats)
View(summary_stats)
source("C:/Users/treharne/Documents/bios103qs/ASSESSMENT/05/summary_table.R")
source("C:/Users/treharne/Documents/bios103qs/ASSESSMENT/05/summary_table.R")
source("C:/Users/treharne/Documents/bios103qs/ASSESSMENT/05/summary_table.R")
View(summary_stats)
source("~/bios103qs/ASSESSMENT/05/summary_table.R")
source("~/bios103qs/ASSESSMENT/05/boxplots.R")
# Load the data
data <- read.csv("compost_999999999.csv")
# Plot a histogram of "Viable counts"
hist(data$Viable.counts, main="Histogram of Viable counts", xlab="Viable counts", ylab="Frequency")
# Add a vertical lines at the mean and median
abline(v=mean(data$Viable.counts), col="red")
abline(v=median(data$Viable.counts), col="blue")
# add a Legend. Quote values to avoid scientific notation
legend("topright", legend=c(paste("Mean =", format(mean(data$Viable.counts), scientific=FALSE)),
paste("Median =", format(median(data$Viable.counts), scientific=FALSE))),
col=c("red", "blue"), lty=1, cex=0.8)
# create a grouped boxplot of "viable counts" by "location"
boxplot(Viable.counts ~ Location, data=data, main="Boxplot of Viable counts by Location", xlab="Location", ylab="Viable counts")
# Map Location values to colors with transparency
location_colors <- as.numeric(factor(data$Location))
color_palette <- rainbow(length(unique(data$Location)))
transparent_colors <- sapply(color_palette, function(col) rgb(t(col2rgb(col)), maxColorValue=255, alpha=100))
# scatter plot of "Viable counts" by "Temperature". color by "Location"
plot(
data$Temperature,
data$Viable.counts,
col=transparent_colors[location_colors],
pch=19,
main="",
xlab="Temperature (deg C)",
ylab="Viable Counts",
#ylim=c(100, 150),
#xlim=c(50, 80)
)
# Add a legend for the locations
legend("topright", legend=levels(factor(data$Location)), col=transparent_colors, pch=19, cex=0.8)
# Load the plotly library
library(plotly)
# Create a 3D scatter plot
fig <- plot_ly(data, x = ~Temperature, y = ~Moisture, z = ~Viable.counts, color = ~Location, colors = rainbow(length(unique(data$Location))), type = 'scatter3d', mode = 'markers', marker = list(size = 5, opacity = 0.7))
# Add titles and labels
fig <- fig %>% layout(title = "3D Scatter Plot of Temperature, Moisture, and Viable Counts",
scene = list(xaxis = list(title = 'Temperature'),
yaxis = list(title = 'Moisture'),
zaxis = list(title = 'Viable Counts')))
# Show the plot
fig
source("~/bios103qs/ASSESSMENT/05/summary_table.R")
View(data)
install.packages("plotly")
# Include the plotly library in your environment
library(plotly)
# Load the data
data <- read.csv("compost_999.csv")
# Load the data
data <- read.csv("compost_999999999.csv")
# Calculate the conversion factor for cfu per gram
factor <- 2e5 / 1e7
data$cfu_per_g <- data$Viable.counts * factor
# Create an interactive 3D scatterplot
fig <- plot_ly(data = data,
x = ~Temperature,
y = ~Moisture,
z = ~cfu_per_g,
color = ~Location,
colors = "Set1",  # Choose a color palette
type = 'scatter3d',
mode = 'markers',
marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Temperature (°C)'),
zaxis = list(title = 'VBC'),
yaxis = list(title = 'Moisture (%)')))
# Show the figure
fig
source("C:/Users/treharne/Documents/bios103qs/ASSESSMENT/05/plotly.R")
install.packages("plotly")
source("C:/Users/treharne/Documents/bios103qs/ASSESSMENT/05/plotly.R")
source("C:/Users/treharne/Documents/bios103qs/ASSESSMENT/05/plotly.R")
source("C:/Users/treharne/Documents/bios103qs/ASSESSMENT/05/plotly.R")
# Create an interactive 3D scatterplot
fig <- plot_ly(data = data,
x = ~Temperature,
y = ~Moisture,
z = ~cfu_per_g,
color = ~Location,
colors = "Set2",  # Choose a color palette
type = 'scatter3d',
mode = 'markers',
marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Temperature (°C)'),
zaxis = list(title = 'VBC'),
yaxis = list(title = 'Moisture (%)')))
# Show the figure
fig
